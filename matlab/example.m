clc;

Mtest=load('dummydata_square_tri_test.mat')

%%%%%%%
% Example 1: Convert each square 86x86 matrix into a 1x3655 upper triangular vector
% using the tri_indices stored in the python-generated file
Ctri_new={};
for i = 1:numel(Mtest.Csquare)
    Ctri_new{i} = kraken_square2tri(Mtest.Csquare{i}, 'tri_indices', Mtest.tri_indices);
end
%concatenate them into a 10x3655 matrix
Ctri_new=cat(1,Ctri_new{:});

%does my new 10x3655 match the python-generated 10x3655?
test1_rms_Ctri=sqrt(mean((Ctri_new-Mtest.Ctri).^2,2));
fprintf('Test 1: These should all be 0\n')
disp(test1_rms_Ctri')

%%%%%%%
% Example 2: convert each square 86x86 matrix into a 1x3655 upper triangular vector
% using tri_indices generated by kraken_square2tri
Ctri_new={};
for i = 1:numel(Mtest.Csquare)
    [Ctri_new{i}, tri_indices] = kraken_square2tri(Mtest.Csquare{i}, 'k', 1, 'return_indices',true);
end
%concatenate them into a 10x3655 matrix
Ctri_new=cat(1,Ctri_new{:});

%does my new 10x3655 match the python-generated 10x3655?
test2_rms_Ctri=sqrt(mean((Ctri_new-Mtest.Ctri).^2,2));

fprintf('Test 2: These should all be 0\n')
disp(test2_rms_Ctri');

%does my new 2x3655 tri_indices match the python-generated tri_indices?
test2_eq_triidx=all(Mtest.tri_indices==tri_indices,'all');
fprintf('Test 2: This should be 1\n')
disp(test2_eq_triidx)

%%%%%%
% Example 3: convert each 1x3655 vector back into an 86x86 square matrix
% using the tri_indices stored in the python-generated file

Csquare_new={};
for i = 1:size(Ctri_new,1)
    Csquare_new{i}=kraken_tri2square(Ctri_new(i,:), 'tri_indices',Mtest.tri_indices, 'diagval', 1);
end

test3_rms_Csquare=zeros(numel(Csquare_new),1);
for i = 1:numel(Csquare_new)
    test3_rms_Csquare(i)=sqrt(mean((Csquare_new{i}-Mtest.Csquare{i}).^2,'all'));
end

%do the new 86x86 square matrices match the original inputs? (within tolerance)
fprintf('Test 3: These should all be 1\n')
disp(test3_rms_Csquare'<1e-8)

%%%%%
% Example 4: convert each 1x3655 vector back into an 86x86 square matrix
% using tri_indices generated by kraken_square2tri
[~, tri_indices] = kraken_square2tri(Mtest.Csquare{1}, 'k', 1, 'return_indices',true);

Csquare_new={};
for i = 1:size(Ctri_new,1)
    Csquare_new{i}=kraken_tri2square(Ctri_new(i,:), 'tri_indices',tri_indices, 'diagval', 1);
end

test4_rms_Csquare=zeros(numel(Csquare_new),1);
for i = 1:numel(Csquare_new)
    test4_rms_Csquare(i)=sqrt(mean((Csquare_new{i}-Mtest.Csquare{i}).^2,'all'));
end

%do the new 86x86 square matrices match the original inputs? (within tolerance)
fprintf('Test 4: These should all be 1\n')
disp(test4_rms_Csquare'<1e-8)